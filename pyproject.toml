[project]
name = "ai-tools-mcp-server"
version = "0.2.0"
description = "Advanced MCP Server providing fetch, search, translation and prompt optimization tools with caching, auth and dashboard."
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "Community Contributors" }
]
requires-python = ">=3.11"
keywords = ["mcp", "model context protocol", "ai", "tools", "server", "smithery"]
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Application Frameworks"
]
dependencies = [
        "mcp[cli]>=1.17.0",
        "requests>=2.31.0",
        "openai>=1.0.0",
        "fastapi>=0.115.0",
        "uvicorn>=0.30.0",
        "redis>=6.0.0",
        "psutil>=5.9.0",
        "jinja2>=3.1.0",
        "python-multipart>=0.0.6",
        "python-dotenv>=1.0.0"
]

[project.optional-dependencies]
dashboard = ["fastapi", "uvicorn", "jinja2", "psutil"]
web = ["fastapi", "uvicorn", "jinja2"]
dev = ["pytest", "pytest-asyncio", "httpx", "ruff"]
all = ["ai-tools-mcp-server[dashboard,web,dev]"]

[project.urls]
Homepage = "https://github.com/dronreef2/MCPserve"
Repository = "https://github.com/dronreef2/MCPserve"
Issues = "https://github.com/dronreef2/MCPserve/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["."]

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.pytest.ini_options]
python_files = "test_*.py"
addopts = "-q"